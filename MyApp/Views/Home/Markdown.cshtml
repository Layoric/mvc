@{
    ViewData["Title"] = "Typography";
}

<div class="mt-8 max-w-xs mx-auto">
    <h2 class="text-4xl my-4 text-center"><a href="/ui/Hello" class="font-semibold text-indigo-600 hover:text-indigo-500">Hello</a> API</h2>
    <input type="text" id="txtName" class="block w-full sm:text-sm rounded-md dark:text-white dark:bg-gray-900 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 dark:border-gray-600">
    <div id="result" class="my-2 text-2xl text-center text-green-700 font-semibold">&nbsp;</div>
</div>

<script type="module">
import { JsonServiceClient, $1, on } from 'https://unpkg.com/@@servicestack/client/dist/servicestack-client.mjs'
import { Hello } from '/js/dtos.mjs'

on('#txtName', {
    async keyup(el) {
        const client = new JsonServiceClient()
        const api = await client.api(new Hello({ name:el.target.value }))
        $1('#result').innerHTML = api.response.result
    }
})
</script>

<div id="content" class="my-8 pb-8 mx-auto prose lg:prose-xl" style="max-width:110ch"></div>

<template id="docs">
## View in API Explorer

 - [Call API](/ui/Hello)
 - [View API Details](/ui/Hello?tab=details)
 - [Browse API Source Code](/ui/Hello?tab=code)

### Tailwind Configuration

This empty web template is configured with a stand-alone [Tailwind CSS CLI](https://tailwindcss.com/docs/installation) 
installation with a modified **tailwind.input.css** that includes [@@tailwindcss/forms](https://github.com/tailwindlabs/tailwindcss-forms)
and [@@tailwindcss/aspect-ratio](https://github.com/tailwindlabs/tailwindcss-aspect-ratio) plugins so that no **node_modules** dependencies are needed.

The [@@tailwindcss/typography](https://tailwindcss.com/docs/typography-plugin) plugin css is contained in `css/typography.css` which
applies a beautiful default style to unstyled HTML, ideal for Markdown content like this.

### Running Tailwind during development

Run tailwind in a new terminal during development to auto update your **app.css**:

```bash
$ npm run ui:dev
```

For an optimal development experience run it together with `dotnet watch` to preview changes on each save.

Or if using JetBrains Rider, **ui:dev** can be run directly from Rider in **package.json**:

![](https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/servicestack-reference/scripts-tailwind.png)

### Using JsonServiceClient in Web Pages

Easiest way to call APIs is to use [@@servicestack/client](https://docs.servicestack.net/javascript-client) with
the built-in [/types/mjs](/types/mjs) which returns your APIs annotated typed JS DTOs that can be used immediately 
(i.e. without any build steps):

```html
&lt;input type="text" id="txtName"&gt;
&lt;div id="result"&gt;&lt;/div&gt;
```

```html
&lt;script type="module"&gt;
import { JsonServiceClient, $1, on } from 'https://unpkg.com/@@servicestack/client/dist/servicestack-client.mjs'
import { Hello } from '/types/mjs'

on('#txtName', {
    async keyup(el) {
        const client = new JsonServiceClient()
        const api = await client.api(new Hello({ name:el.target.value }))
        $1('#result').innerHTML = api.response.result
    }
})
&lt;/script&gt;
```

For better IDE intelli-sense during development, save the annotated Typed DTOs to disk with:

```bash
$ npm run dtos
```

Where it will enable IDE static analysis when calling Typed APIs from JavaScript:

```html
&lt;script type="module"&gt;
import { Hello } from '/js/dtos.mjs'
client.api(new Hello({ name }))
&lt;/script&gt;
```
</template>

<link rel="stylesheet" href="//unpkg.com/@@highlightjs/cdn-assets/styles/atom-one-dark.min.css">
<script src="//unpkg.com/@@highlightjs/cdn-assets/highlight.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script>
function decode(html) {
    var txt = document.createElement("textarea")
    txt.innerHTML = html
    return txt.value
}    
document.querySelector('#content').innerHTML = marked.parse(decode(document.querySelector('#docs').innerHTML))
hljs.highlightAll()
</script>